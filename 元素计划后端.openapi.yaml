openapi: 3.0.1
info:
  title: 元素计划后端
  description: ''
  version: 1.0.0
tags: []
paths:
  /user/register/:
    post:
      summary: 用户注册
      deprecated: false
      description: ''
      tags: []
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  description: 用户名
                  example: '{{$person.fullName}}'
                  type: string
                password:
                  description: 密码
                  example: '12345'
                  type: string
                email:
                  description: 邮箱
                  example: '{{$internet.email}}'
                  type: string
                captcha:
                  description: 从邮箱获得的验证码（四位随机数字）
                  example: '1234'
                  type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: 参数格式异常示例
                  description: ''
                  value:
                    message: form is invalid
                '2':
                  summary: 成功示例
                  description: ''
                  value:
                    message: form is valid
          headers: {}
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              example:
                message: >-
                  form is invalid: <ul class="errorlist"><li>email<ul
                  class="errorlist"><li>请传入一个正确的邮箱！</li></ul></li><li>captcha<ul
                  class="errorlist"><li>验证码和邮箱不匹配！</li></ul></li></ul>
          headers: {}
      security: []
  /user/logout/:
    get:
      summary: 退出登录
      deprecated: false
      description: ''
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /user/captcha/:
    get:
      summary: 请求发送验证码
      deprecated: false
      description: ''
      tags: []
      parameters:
        - name: email
          in: query
          description: ''
          required: false
          example: 2244602447@qq.com
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              example:
                code: 200
                message: 邮箱验证码发送成功！
          headers: {}
      security: []
  /user/login/:
    post:
      summary: 用户登录
      deprecated: false
      description: ''
      tags: []
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  description: 邮箱
                  example: 2244602447@qq.com
                  type: string
                password:
                  description: 密码
                  example: '123456'
                  type: string
                remember:
                  type: integer
                  description: 是否记住密码，值为1是记住，0为不记住（可根据前端页面元素的value属性调整）
                  example: '{{$number.binary}}'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: 异常示例
                  description: ''
                  value:
                    message: form is invalid
                '2':
                  summary: 成功示例
                  description: ''
                  value:
                    message: GET register.html
          headers: {}
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              example:
                message: form is invalid
                errors:
                  password:
                    - message: This field is required.
                      code: required
                code: 400
          headers: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              example:
                message: 密码错误
                code: 401
          headers: {}
        '402':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              example:
                message: 邮箱未注册
                code: 402
          headers: {}
      security: []
  /user/get_user_info/:
    get:
      summary: 获取用户信息
      deprecated: false
      description: ''
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              example:
                code: 200
                message: 用户信息获取成功
                data:
                  username: Erasor
                  email: 2244602447@qq.com
                  career: 动态内部网专员
                  birth_date: '2024-11-24'
          headers: {}
      security: []
  /user/update_user_info/:
    post:
      summary: 更新用户信息
      deprecated: false
      description: 请求参数可多选可缺省日期格式要正确（建议在更改邮箱和密码时验证之前的密码和邮箱）
      tags: []
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  description: 用户名，用户名
                  example: Erasor
                  type: string
                password:
                  description: 密码
                  example: '12345'
                  type: string
                email:
                  description: 邮箱，邮箱
                  example: 2244602447@qq.com
                  type: string
                career:
                  description: 职业
                  example: '{{$person.jobTitle}}'
                  type: string
                birth_date:
                  description: 生日（YYYY-MM-DD）
                  example: '2024-01-01'
                  type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              example:
                code: 200
                message: 用户信息更新成功
          headers: {}
      security: []
  /user/upload_file/:
    post:
      summary: 上传备份文件
      deprecated: false
      description: ''
      tags: []
      parameters: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  format: binary
                  type: string
                  description: 需要上传的备份文件
                  example: file://C:\Users\22446\Downloads\response.txt
      responses:
        '200':
          description: ''
          content:
            '*/*':
              schema:
                type: object
                properties: {}
              example: File uploaded successfully
          headers: {}
      security: []
  /user/download_file/:
    get:
      summary: 下载备份文件
      deprecated: false
      description: ''
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          content:
            '*/*':
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
components:
  schemas: {}
  securitySchemes: {}
servers: []
security: []
